name: Benchmark on Pull Request

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  benchmark:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script: [ml, nn]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.3'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run benchmark script
      run: |
        file=run-${{ matrix.script }}.sh
        chmod +x $file
        ./$file

    - name: Read benchmark results
      id: read-results
      run: |
        chmod +x .github/scripts/read_stats.bash
        .github/scripts/read_stats.bash > comment.txt

    - name: Post results as PR comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const statsContent = fs.readFileSync('comment.txt', 'utf8');
          if (!statsContent) {
            throw new Error("No stats content found!");
          }

          const prNumber = context.payload.pull_request.number;
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const scriptName = '${{ matrix.script }}';
          const commentHeader = `## Benchmark Results (${scriptName})`;

          // Fetch existing comments
          const { data: comments } = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: prNumber,
          });

          // Delete previous benchmark comments for this script
          for (const comment of comments) {
            if (
              comment.user.login === 'github-actions[bot]' &&
              comment.body.startsWith(commentHeader)
            ) {
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }
          }

          // Post new benchmark result comment
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: prNumber,
            body: `${commentHeader}\n\n${statsContent}\n`
          });
